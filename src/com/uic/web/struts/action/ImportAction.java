/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;

import com.uic.domain.Student;
import com.uic.service.imp.ExcelServiceImp;
import com.uic.service.inter.ExcelServiceInter;
import com.uic.util.ExcelHelper;
import com.uic.web.struts.form.FileUploadForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-11-2015
 * 
 * XDoclet definition:
 * @struts.action parameter="flag"
 */
public class ImportAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward goImportUi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("coordinator")) {
			return mapping.findForward("goImportUi");
			
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward importStudents(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("coordinator")) {
			
			FileUploadForm fileUpload = (FileUploadForm)form;
			
			Integer flag2 = fileUpload.getFlag2();
			System.out.println(flag2);
			
			FormFile excelFile = fileUpload.getExcelFile();
			
			//String url = request.getHeader("Referer");
			// 检验传递过来的隐藏参数 防刷新
			if (flag2 != null && excelFile!=null) {
				if (flag2.equals(session.getAttribute("flag"))) {
					// Update data
					session.removeAttribute("flag");
					
					ExcelServiceInter excelService = new ExcelServiceImp();
					ExcelHelper excel = new ExcelHelper();
					
					try {
						InputStream stream = excelFile.getInputStream();// 把文件读入
						System.out.println(request.getServletContext().getRealPath("/"));
						String filePath = request.getServletContext().getRealPath("/upload");// 上传到指定的upload包中
						System.out.println(filePath);
						//ByteArrayOutputStream baos = new ByteArrayOutputStream();
						OutputStream bos = new FileOutputStream(filePath + "//"+ excelFile.getFileName());// 建立一个上传文件的输出流
						//System.out.println(filePath+"/"+file.getFileName());
						int bytesRead = 0;
						byte[] buffer = new byte[8192];
						while ((bytesRead = stream.read(buffer, 0, 8192)) != -1) {
							bos.write(buffer, 0, bytesRead);// 将文件写入服务器
						}
						bos.close();
						stream.close();
					} catch (Exception e) {
						System.err.print(e);
						throw new Exception(e);
					}
					
					
					String path;
					try {
						path = new String(request.getServletContext().getRealPath("/upload/"+excelFile.getFileName()));
						System.out.println(path);
						File file = new File(path);
						List<Student> ls = excel.addCustomerAssign(file);
						Iterator<Student> iter = ls.iterator();
						boolean deletePreData = false;
						if(excelService.deletePreData()){
							System.out.println("Successfully: clean MySQL student table!");
							deletePreData = true;
						}else{
							System.out.println("!Failed: clean MySQL student table!");
						}
						int total = 0;
						int countTrue = 0;//the number of successfully insert
						int countFalse = 0;//the number of failed insert
						while (iter.hasNext()) {
							Student student = (Student) iter.next();
							if (excelService.insertExcel(student)) {
								countTrue++;
							}else{
								countFalse++;
							}
							total++;
						}
						request.setAttribute("importResult", "true");
						request.setAttribute("totalCount", total);
						request.setAttribute("deletePreData", deletePreData);
						request.setAttribute("successfulCount", countTrue);
						request.setAttribute("failedCount", countFalse);
						
					} catch (Exception e) {
						// TODO Auto-generated catch block
						request.setAttribute("importResult", "false");
						request.setAttribute("ErrorInfo", e.getMessage());
						e.printStackTrace();
						
					}
				}
				return new ActionForward("/import.do?flag=goImportUi");
			}else {
				System.out.println("Hereeeeeeeeeeeeee!");
				String message = "Import failed: did not receive parameters!";
				request.setAttribute("tipMessage", message);
				return new ActionForward("/import.do?flag=goImportUi");
			}
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
}