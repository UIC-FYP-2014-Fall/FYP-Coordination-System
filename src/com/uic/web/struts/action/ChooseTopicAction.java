/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.uic.domain.StuTopic;
import com.uic.domain.Student;
import com.uic.domain.TeaTopic;
import com.uic.domain.Topic;
import com.uic.service.imp.FYPServiceImp;
import com.uic.service.imp.StudentServiceImp;
import com.uic.service.imp.TeachersServiceImp;
import com.uic.util.BaseUtil;
import com.uic.util.PropertiesHelper;
import com.uic.web.struts.form.SelectTopicForm;

/**
 * MyEclipse Struts Creation date: 12-03-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="flag"
 */
public class ChooseTopicAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward goChooseTopic(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("student")) {
			// first check if the student choose the topic
			PropertiesHelper ph = new PropertiesHelper("/WEB-INF/config/FYP-system.properties");
			String preStart = ph.getProperties("ChooseTopicStartDateTime");
			String preEnd = ph.getProperties("ChooseTopicEndDateTime");
			String timetablePeriod = preStart + " to " + preEnd;
			if (preStart != null && preEnd != null) {
				if (BaseUtil.todayIsInPeriod(preStart, preEnd)) {
					Student curStudent = (Student) request.getSession().getAttribute("studentinfo");
					FYPServiceImp fypServiceImp = new FYPServiceImp();
					StudentServiceImp studentService = new StudentServiceImp();
					if (studentService.checkIfStudentHasChoosedTopic(curStudent.getId().toString())) {
						StuTopic stuTopic = fypServiceImp.getUniqueStuTopicByStudent(curStudent);
						System.out.println(stuTopic.getTopic().getFid());
						ArrayList<String> supervisorList = new ArrayList<String>();
						ArrayList<TeaTopic> teaTopicList = (ArrayList<TeaTopic>) fypServiceImp.getTeaTopicByTopicId(stuTopic.getTopic().getFid().toString());
						StringBuffer supervisor = new StringBuffer();
						for (int j = 0; j < teaTopicList.size(); j++) {
							supervisor.append(teaTopicList.get(j).getTeacher().getName() + " ");
						}
						supervisorList.add(supervisor.toString());
						request.setAttribute("chooseTopicStart", "true");
						request.setAttribute("supervisorList", supervisorList);
						request.setAttribute("stuTopic", stuTopic);
						request.setAttribute("ifStudentHasChoosedTopic", "true");
						return mapping.findForward("goChooseTopicUi");
					} else {
						ArrayList<Topic> topicList = (ArrayList<Topic>) fypServiceImp.getAllTopic();
						ArrayList<String> supervisorList = new ArrayList<String>();
						for (int i = 0; i < topicList.size(); i++) {
							ArrayList<TeaTopic> teaTopicList = (ArrayList<TeaTopic>) fypServiceImp.getTeaTopicByTopicId(topicList.get(i).getFid().toString());
							StringBuffer supervisor = new StringBuffer();
							for (int j = 0; j < teaTopicList.size(); j++) {
								supervisor.append(teaTopicList.get(j).getTeacher().getName() + " ");
							}
							supervisorList.add(supervisor.toString());
						}
						request.setAttribute("chooseTopicStart", "true");
						request.setAttribute("ifStudentHasChoosedTopic", "false");
						request.setAttribute("supervisorList", supervisorList);
						request.setAttribute("allTopicList", topicList);
						return mapping.findForward("goChooseTopicUi");
					}
				}else{
					request.setAttribute("chooseTopicStart", "false");
					request.setAttribute("timetablePeriod", timetablePeriod);
					return mapping.findForward("goChooseTopicUi");
				}
			} else {
				request.setAttribute("coordinatorHasNotSetOpenTime", "true");
				return mapping.findForward("goChooseTopicUi");
			}
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}

	public ActionForward goChooseGroupTopicUi(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("student")) {
			FYPServiceImp fypService = new FYPServiceImp();
			StudentServiceImp studentService = new StudentServiceImp();
			String topicId = request.getParameter("topicId");
			Topic topic = fypService.getUniqueTopic(topicId);
			Student curStudent = (Student) request.getSession().getAttribute("studentinfo");
			ArrayList<Student> allStudentList = studentService.getAllStudent();
			request.setAttribute("curStudent", curStudent);
			request.setAttribute("allStudentList", allStudentList);
			request.setAttribute("topic", topic);

			return mapping.findForward("goChooseGroupTopicUi");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}

	public ActionForward selectIndividualTopic(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("student")) {
			// check if selected
			// check teacher quota
			// select topicï¼Œset topic isfull.reduce teacher quotaleft
			FYPServiceImp fypService = new FYPServiceImp();
			TeachersServiceImp teacherService = new TeachersServiceImp();
			Student curStudent = (Student) request.getSession().getAttribute("studentinfo");
			String topicId = request.getParameter("topicId");
			if (!fypService.checkIfTopicSelected(topicId)) {
				if (teacherService.checkTeacherHasQuota(topicId, "1")) {
					fypService.selectIndividualTopic(topicId, curStudent.getId().toString());
					teacherService.minusTeacherQuotaLeft(topicId);
				} else {
					request.setAttribute("SupervisorQuotaIsFull", "true");
					return mapping.findForward("goChooseTopic");
				}
			} else {
				request.setAttribute("FYPHasBeenSelected", "true");
				return mapping.findForward("goChooseTopic");
			}
			request.setAttribute("chooseIndividualTopicSuccess", "true");
			return mapping.findForward("goChooseTopic");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}

	public ActionForward selectGroupTopic(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("student")) {
			// check if the member same?
			// check if every student have select topic
			// check if topic have select
			// check if teacher have quota
			// set topic is full, add stutopic
			// reduce teacher quota
			SelectTopicForm selectTopicForm = (SelectTopicForm) form;
			StudentServiceImp studentService = new StudentServiceImp();
			FYPServiceImp fypService = new FYPServiceImp();
			TeachersServiceImp teacherService = new TeachersServiceImp();
			System.out.println("select topic id " + selectTopicForm.getTopicId() + " " + selectTopicForm.getMember().length);
			Topic topic = fypService.getUniqueTopic(selectTopicForm.getTopicId());
			String[] members = selectTopicForm.getMember();
			String temp;
			// check if the member same?
			for (int i = 0; i < members.length; i++) {
				temp = members[i];
				for (int j = i + 1; j < members.length; j++) {
					if (temp.equals(members[j])) {
						request.setAttribute("memberAreTheSame", "true");
						return mapping.findForward("gochooseGroupTopic");
					}
				}
			}
			// check if every student have select topic
			for (int i = 0; i < members.length; i++) {
				if (studentService.checkIfStudentHasChoosedTopic(members[i])) {
					request.setAttribute("someOneHaveAlreadySelectAProject", "true");
					return mapping.findForward("goChooseTopic");
				}
			}
			// check if topic have select
			if (!fypService.checkIfTopicSelected(selectTopicForm.getTopicId())) {
				if (teacherService.checkTeacherHasQuota(topic.getFid().toString(), topic.getNumOfStudent().toString())) {
					// set topic is full, add stutopic
					// reduce teacher quota
					fypService.selectGroupTopic(selectTopicForm.getTopicId(), members);
					teacherService.minusTeacherQuotaLeft(selectTopicForm.getTopicId());
				} else {
					request.setAttribute("SupervisorQuotaIsFull", "true");
					return mapping.findForward("goChooseTopic");
				}
			} else {
				request.setAttribute("FYPHasBeenSelected", "true");
				return mapping.findForward("goChooseTopic");
			}
			request.setAttribute("chooseGroupTopicSuccess", "true");
			return mapping.findForward("goChooseTopic");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}

	public ActionForward dropTopic(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("student")) {
			// delete stutopic
			// set topic isfull to false
			// add teacher quota
			String topicId = request.getParameter("topicId");
			boolean flag = false;
			FYPServiceImp fypService = new FYPServiceImp();
			TeachersServiceImp teacherService = new TeachersServiceImp();
			if (fypService.deleteStuTopicByTopicId(topicId)) {
				if (teacherService.addTeacherQuotaLeft(topicId)) {
					flag = true;
				} else {
					flag = false;
				}
			} else {
				flag = false;
			}
			if (flag) {
				request.setAttribute("dropTopicSuccess", "true");
			} else {
				request.setAttribute("dropTopicSuccess", "false");
			}
			return mapping.findForward("goChooseTopic");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
}