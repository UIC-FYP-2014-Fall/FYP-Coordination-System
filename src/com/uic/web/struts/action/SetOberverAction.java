/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.uic.domain.ObsTopic;
import com.uic.domain.TeaTopic;
import com.uic.domain.Teacher;
import com.uic.domain.Topic;
import com.uic.service.imp.FYPServiceImp;
import com.uic.service.imp.TeachersServiceImp;
import com.uic.util.BaseUtil;
import com.uic.util.PropertiesHelper;
import com.uic.web.struts.form.ObserverForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-02-2014
 * 
 * XDoclet definition:
 * @struts.action path="/setOberver" name="observerForm" parameter="flag" scope="request" validate="true"
 */
public class SetOberverAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward chooseObserverUi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		// first get TeaTopic where teacher_id   *Topic*
		// then get student topic // then get get Supervisorlist
		
		if(request.getSession().getAttribute("role").equals("teacher")){
			PropertiesHelper ph = new PropertiesHelper(
					"/WEB-INF/config/FYP-system.properties");
			String start = ph.getProperties("ChooseTopicEndDateTime");
			String end = ph.getProperties("ChooseExaminersStartDateTime");
			if (start != null && end != null) {
				//如果在时间段里面
				if(BaseUtil.todayIsInPeriod(start, end)||BaseUtil.todayIsAfter(end)){
					//prepare date: teacherList and Teatopic List of the current teacher.
					Teacher curTeacher = (Teacher) request.getSession().getAttribute("teacherinfo");
					
					TeachersServiceImp teachersServiceImp=new TeachersServiceImp();
					FYPServiceImp fypServiceImp = new FYPServiceImp();
					
					ArrayList<Teacher> teacherList =(ArrayList<Teacher>) teachersServiceImp.getTeachers();
					ArrayList<TeaTopic> teaTopicList = (ArrayList<TeaTopic>)fypServiceImp.getTeaTopic(curTeacher.getId().toString());
					
					HashMap<String,String> topicObsMap = new HashMap<String, String>();
					HashMap<String,List<TeaTopic>> multiSupTopicMap = new HashMap<String, List<TeaTopic>>();
					
					for(TeaTopic teaTopic: teaTopicList){
						ObsTopic obsTopic = fypServiceImp.getObsTopicByTopicId(teaTopic.getTopic().getFid().toString());
						if(obsTopic==null){
							topicObsMap.put(teaTopic.getTopic().getTitle(), "null");
						}else{
							topicObsMap.put(teaTopic.getTopic().getTitle(), obsTopic.getObserver().getName());
						}
						if(fypServiceImp.getTeaTopicByTopicId(teaTopic.getTopic().getFid().toString()).size()>1){
							System.out.println("multi supervisor");
							multiSupTopicMap.put(teaTopic.getTopic().getFid().toString(), fypServiceImp.getTeaTopicByTopicId(teaTopic.getTopic().getFid().toString()));
						}
						
					}
					
					
					request.setAttribute("teaTopicList", teaTopicList);
					request.setAttribute("teacherList", teacherList);
					request.setAttribute("topicObsMap", topicObsMap);
					request.setAttribute("multiSupTopicMap", multiSupTopicMap);
					if(BaseUtil.todayIsAfter(end)){
						request.setAttribute("afterChooseObs", "true");
					}else{
						request.setAttribute("afterChooseObs", "false");
					}
					request.setAttribute("chooseObserverPeriod", start+ " to " +end);
					request.setAttribute("chooseObserverStart", "true");
					
					return mapping.findForward("chooseObserverUi");
					
				}else{
					request.setAttribute("chooseObserverStart","before");
					return mapping.findForward("chooseObserverUi");
				}
			}else{
				request.setAttribute("chooseObserverStart", "false");
				return mapping.findForward("chooseObserverUi");
			}
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	
	public ActionForward setObserver(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ObserverForm observerForm = (ObserverForm) form;// TODO Auto-generated method stub
		FYPServiceImp fypService= new FYPServiceImp();
		TeachersServiceImp teacherService= new TeachersServiceImp();
		boolean flag=false;
		String[] obsTopic=observerForm.getObsTopic();
		for(int i=0;i<obsTopic.length;i++){
			String[] temp=obsTopic[i].split(",");
			if(temp[0].equals("-1")&&temp[1].equals("-1")){
				
			}else{
				Topic topic = fypService.getUniqueTopic(temp[0]);
				Teacher observer= teacherService.getUniqueTeacherById(temp[1]);
				flag=fypService.setObserver(observer, topic);
			}
		}
		if(flag){
			request.setAttribute("setObserverSuccess", "true");
			request.setAttribute("setObserverInfo", "Observer changed successful!");
		}else{
			request.setAttribute("setObserverSuccess", "false");
			request.setAttribute("setObserverInfo", "Observer changed failed!");
		}
		return mapping.findForward("obsSaved");
	}
}