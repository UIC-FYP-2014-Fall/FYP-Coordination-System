/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.uic.domain.ObsTopic;
import com.uic.domain.TeaTopic;
import com.uic.domain.Teacher;
import com.uic.domain.Topic;
import com.uic.service.imp.FYPServiceImp;
import com.uic.service.imp.TeachersServiceImp;
import com.uic.util.BaseUtil;
import com.uic.util.PropertiesHelper;
import com.uic.web.struts.form.ObserverForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-02-2014
 * 
 * XDoclet definition:
 * @struts.action path="/setOberver" name="observerForm" parameter="flag" scope="request" validate="true"
 */
public class SetOberverAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward chooseObserverUi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		// first get TeaTopic where teacher_id   *Topic*
		// then get student topic // then get get Supervisorlist
		
		if(request.getSession().getAttribute("role").equals("teacher")){
			PropertiesHelper ph = new PropertiesHelper(
					"/WEB-INF/config/FYP-system.properties");
			String start = ph.getProperties("ChooseTopicEndDateTime");
			String end = ph.getProperties("ChooseExaminersStartDateTime");
			if (start != null && end != null) {
				if(BaseUtil.todayIsInPeriod(start, end)||BaseUtil.todayIsAfter(end)){
					//prepare date: teacherList and Teatopic List of the current teacher.
					Teacher curTeacher = (Teacher) request.getSession().getAttribute("teacherinfo");
					TeachersServiceImp teachersServiceImp=new TeachersServiceImp();
					FYPServiceImp fypServiceImp = new FYPServiceImp();
					ArrayList<Teacher> teacherList =(ArrayList<Teacher>) teachersServiceImp.getTeachers();
					List<TeaTopic> teaTopicList = fypServiceImp.getTeaTopic(curTeacher.getId().toString());
					ArrayList<ObsTopic> indObsTopics=new ArrayList<ObsTopic>();
					ArrayList<ObsTopic> groObsTopics=new ArrayList<ObsTopic>();
					ArrayList<String> indObserverList = new ArrayList<String>();
					ArrayList<String> groObserverList = new ArrayList<String>();
				
					ArrayList<TeaTopic> removeObj= new ArrayList<TeaTopic>();
					for(int i =0;i<teaTopicList.size();i++){
						if(fypServiceImp.ifTopicHasBeenChoosenByStu(teaTopicList.get(i).getTopic().getFid().toString())){
							//do nothings
							System.out.println("topic choosen "+teaTopicList.get(i).getTopic().getTitle());
						}else{
							System.out.println("topic remove "+teaTopicList.get(i).getTopic().getTitle());
							removeObj.add(teaTopicList.get(i));
						}
					}
					for(TeaTopic t :removeObj){
						teaTopicList.remove(t);
					}
					
					for(TeaTopic teaTopic: teaTopicList){
						if(teaTopic.getTopic().getIndividual()){
							indObsTopics.add(fypServiceImp.getObsTopicByTopicId(teaTopic.getTopic().getFid().toString()));
						}else{
							groObsTopics.add(fypServiceImp.getObsTopicByTopicId(teaTopic.getTopic().getFid().toString()));
						}
					}
					
					boolean bool=true;
					for(int i = 0; i<indObsTopics.size();i++){
						StringBuffer buff = new StringBuffer();
						ObsTopic obsTopic=fypServiceImp.refreshObsTopic(indObsTopics.get(i));
						for(int j=0;j<teacherList.size();j++){
							if(fypServiceImp.checkIfTeacherIsTheSupervisor(obsTopic.getTopic().getFid().toString(),teacherList.get(j))){
								if(bool){
									buff.append(teaTopicList.get(i).getTeacher().getId()+",Please Select;");
									bool=false;
								}
							}else{
								buff.append(teacherList.get(j).getId()+","+teacherList.get(j).getName()+";");
							}
						}
						indObserverList.add(buff.toString());
					}
					bool=true;
					for(int i = 0; i<groObsTopics.size();i++){
						StringBuffer buff = new StringBuffer();
						ObsTopic obsTopic=fypServiceImp.refreshObsTopic(groObsTopics.get(i));
						for(int j=0;j<teacherList.size();j++){
							if(fypServiceImp.checkIfTeacherIsTheSupervisor(obsTopic.getTopic().getFid().toString(),teacherList.get(j))){
								if(bool){
									buff.append(teaTopicList.get(i).getTeacher().getId()+",Please Select;");
									bool=false;
								}
							}else{
								buff.append(teacherList.get(j).getId()+","+teacherList.get(j).getName()+";");
							}
						}
						groObserverList.add(buff.toString());
					}
					if(BaseUtil.todayIsAfter(end)){
						request.setAttribute("afterChooseObs", "true");
					}else{
						request.setAttribute("afterChooseObs", "false");
					}
					request.setAttribute("chooseObserverPeriod", start+ " to " +end);
					request.setAttribute("chooseObserverStart", "true");
					request.setAttribute("indObserverList", indObserverList);
					request.setAttribute("groObserverList", groObserverList);
					request.setAttribute("indObsTopics", indObsTopics);
					request.setAttribute("groObsTopics", groObsTopics);
					return mapping.findForward("chooseObserverUi");
				}else{
					request.setAttribute("chooseObserverStart","before");
					return mapping.findForward("chooseObserverUi");
				}
			}else{
				request.setAttribute("chooseObserverStart", "false");
				return mapping.findForward("chooseObserverUi");
			}
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	
	public ActionForward setObserver(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ObserverForm observerForm = (ObserverForm) form;// TODO Auto-generated method stub
		FYPServiceImp fypService= new FYPServiceImp();
		TeachersServiceImp teacherService= new TeachersServiceImp();
		boolean flag=false;
		String[] obsTopic=observerForm.getObsTopic();
		for(int i=0;i<obsTopic.length;i++){
			String[] temp=obsTopic[i].split(",");
			Topic topic = fypService.getUniqueTopic(temp[0]);
			Teacher observer= teacherService.getUniqueTeacherById(temp[1]);
			flag=fypService.setObserver(observer, topic);
		}
		if(flag){
			request.setAttribute("setObserverSuccess", "true");
			request.setAttribute("setObserverInfo", "Observer changed successful!");
		}else{
			request.setAttribute("setObserverSuccess", "false");
			request.setAttribute("setObserverInfo", "Observer changed failed!");
		}
		return mapping.findForward("obsSaved");
	}
}