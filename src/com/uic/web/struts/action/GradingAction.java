/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.uic.domain.AssessItem;
import com.uic.domain.StuTopic;
import com.uic.domain.Student;
import com.uic.domain.StudentGrade;
import com.uic.domain.Teacher;
import com.uic.service.imp.AssessItemServiceImp;
import com.uic.service.imp.FYPServiceImp;
import com.uic.service.imp.GradeLevelServiceImp;
import com.uic.service.imp.StudentServiceImp;
import com.uic.service.imp.TeachersServiceImp;
import com.uic.service.inter.AssessItemServiceInter;
import com.uic.service.inter.FYPServiceInter;
import com.uic.service.inter.GradeLevelServiceInter;
import com.uic.service.inter.StudentServiceInter;
import com.uic.service.inter.TeachersServiceInter;

/**
 * MyEclipse Struts Creation date: 05-20-2015
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="flag" validate="true"
 * @struts.action-forward name="Grading"
 *                        path="/WEB-INF/logined/Teacher/Grading.jsp"
 */
public class GradingAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward goGradingUI(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("teacher")) {
			Teacher teacher = (Teacher) request.getSession().getAttribute("teacherinfo");
			FYPServiceInter fypService = new FYPServiceImp();
			TeachersServiceInter teacherService = new TeachersServiceImp();
			GradeLevelServiceInter gradeLevelService = new GradeLevelServiceImp();
			
			
			ArrayList<Student> ss = teacherService.getSuperviseStudentList(teacher.getId().toString());
			ArrayList<Student> os = teacherService.getObservateStudentList(teacher.getId().toString());
			ArrayList<Student> es = teacherService.getExmineStudentList(teacher.getId().toString());
			ArrayList<StuTopic> sst = new ArrayList<StuTopic>();
			ArrayList<StuTopic> ost = new ArrayList<StuTopic>();
			ArrayList<StuTopic> est = new ArrayList<StuTopic>();
			
			HashMap<String,StudentGrade> studentGrade = new HashMap<String,StudentGrade>();
			for (Student s : ss) {
				List<StuTopic> st = fypService.getStuTopicByStudent(s);
				sst.add(st.get(0));
				if(gradeLevelService.getStudentGrade(s.getId().toString()).size()==0){
					studentGrade.put(s.getName(), null);
				}else{
					studentGrade.put(s.getName(), gradeLevelService.getStudentGrade(s.getId().toString()).get(0));
				}
				
			}
			for (Student s : os) {
				List<StuTopic> st = fypService.getStuTopicByStudent(s);
				ost.add(st.get(0));
				if(gradeLevelService.getStudentGrade(s.getId().toString()).size()==0){
					studentGrade.put(s.getName(), null);
				}else{
					studentGrade.put(s.getName(), gradeLevelService.getStudentGrade(s.getId().toString()).get(0));
				}
			}
			for (Student s : es) {
				List<StuTopic> st = fypService.getStuTopicByStudent(s);
				est.add(st.get(0));
				if(gradeLevelService.getStudentGrade(s.getId().toString()).size()==0){
					studentGrade.put(s.getName(), null);
				}else{
					studentGrade.put(s.getName(), gradeLevelService.getStudentGrade(s.getId().toString()).get(0));
				}
			}

			request.setAttribute("superviseStudentTopicList", sst);
			request.setAttribute("observateStudentTopicList", ost);
			request.setAttribute("examineStudentTopicList", est);
			request.setAttribute("studentGrade", studentGrade);
			return mapping.findForward("gradingUI");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}

	public ActionForward goEditGradeUI(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("teacher")) {
			String studentID = request.getParameter("sid");
			String role = request.getParameter("role");
			AssessItemServiceInter assessItemService = new AssessItemServiceImp();
			GradeLevelServiceInter gradeService = new GradeLevelServiceImp();
			StudentServiceInter studentService = new StudentServiceImp();

			List<AssessItem> assessItemslist = assessItemService.getAssessItems(role);
			Student curStudent = studentService.getStudentById(studentID);
			List<StudentGrade> sg = gradeService.getStudentGrade(curStudent.getId().toString());
			if (sg.size() == 0) {
				request.setAttribute("record", "noRecord");
				System.out.println("No record");
			} else {
				if(role.equals("supervisor")){
					if(sg.get(0).getSupervisorGrade()==null){
						request.setAttribute("record", "noRecord");
						System.out.println("No record");
					}else{
						request.setAttribute("record", "hasRecord");
						HashMap<String, String> sgMap = getScore(sg.get(0).getSupervisorGrade());
						request.setAttribute("grade", sgMap);

						System.out.println("Has record");
					}
				}else if(role.equals("observer")){
					if(sg.get(0).getObserverGrade()==null){
						request.setAttribute("record", "noRecord");
						System.out.println("No record");
					}else{
						request.setAttribute("record", "hasRecord");
						HashMap<String, String> sgMap = getScore(sg.get(0).getObserverGrade());
						request.setAttribute("grade", sgMap);
						System.out.println("Has record");
					}
				}else if(role.equals("examiner")){
					if(sg.get(0).getExaminerGrade()==null){
						request.setAttribute("record", "noRecord");
						System.out.println("No record");
					}else{
						request.setAttribute("record", "hasRecord");
						HashMap<String, String> sgMap = getScore(sg.get(0).getExaminerGrade());
						request.setAttribute("grade", sgMap);

						System.out.println("Has record");
					}
				}
				
			}
			System.out.println("assessmentItemListSize: "+assessItemslist.size());
			request.setAttribute("assementItemList", assessItemslist);
			request.setAttribute("role", role);
			request.setAttribute("curStudent", curStudent);
			return mapping.findForward("editGradeUI");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}

	public ActionForward editGrade(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("teacher")) {
			AssessItemServiceInter assessItemService = new AssessItemServiceImp();
			StudentServiceInter studentService = new StudentServiceImp();
			GradeLevelServiceInter gradeLevelService = new GradeLevelServiceImp();
			
			String role = request.getParameter("role");
			String studentID = request.getParameter("studentID");
			List<AssessItem> allAssessItemslist = assessItemService.getAssessItems();
			List<AssessItem> assessItemslist = assessItemService.getAssessItems(role);
			Student student = studentService.getStudentById(studentID);
			List<StudentGrade> studentGradeList = gradeLevelService.getStudentGrade(student.getId().toString());
			String gradeList = new String();
			System.out.println("studentGradeList.size()"+studentGradeList.size());
			if (studentGradeList.size() == 0) {
				for (AssessItem assessItem : assessItemslist) {
					gradeList = codeScore(assessItem.getId().toString(), request.getParameter(assessItem.getName()), gradeList);
				}
				StudentGrade sg = new StudentGrade();
				if(role.equals("supervisor")){
					sg.setSupervisorGrade(gradeList);;
				}else if(role.equals("observer")){
					sg.setObserverGrade(gradeList);
				}else if(role.equals("examiner")){
					sg.setExaminerGrade(gradeList);
				}
				sg.setStudent(student);
				// save sg
				gradeLevelService.saveStudentGrade(sg);
				request.setAttribute("gradeSavedSuccess", "true");
				request.setAttribute("gradeSavedSuccessInfo", student.getName()+"'s grade saved.");
				return new ActionForward("/grading.do?flag=goGradingUI");
			}else{
				for (AssessItem assessItem : assessItemslist) {
					gradeList = codeScore(assessItem.getId().toString(), request.getParameter(assessItem.getName()), gradeList);
				}
				System.out.println("here, gradeList"+gradeList);
				// update sg
				gradeLevelService.updateStudentGrade(role, gradeList, student.getId().toString());
				if(gradeLevelService.checkIfallTeachersHaveMarkTheGrade(student.getId().toString())){
					StudentGrade studentGrade = calculateAverageAndTotalScore(studentGradeList.get(0),allAssessItemslist);
					gradeLevelService.saveStudentGrade(studentGrade);
				}
				
				request.setAttribute("gradeSavedSuccess", "true");
				request.setAttribute("gradeSavedSuccessInfo", student.getName()+"'s grade updated.");
				return new ActionForward("/grading.do?flag=goGradingUI");
			}
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}

	public HashMap<String, String> getScore(String gradeList) {
		HashMap<String, String> map = new HashMap<String, String>();
		String[] grades = gradeList.split(";");
		for (String grade : grades) {
			String[] g = grade.split(",");
			map.put(g[0], g[1]);
		}
		return map;
	}

	public StudentGrade calculateAverageAndTotalScore(StudentGrade studentGrade, List<AssessItem> assessItemsList){
		java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00");
		String average = null;
		HashMap<String, String> scoreMap = getScoreMap();
		HashMap<String, String> supScoreMap = getScore(studentGrade.getSupervisorGrade());
		HashMap<String, String> obsScoreMap = getScore(studentGrade.getObserverGrade());
		HashMap<String, String> examScoreMap = getScore(studentGrade.getExaminerGrade());
		String averageGradeList = new String();
		float averageScore = 0, supScore=0,obsScore=0,examScore=0;
		int numOfRole = 0;
		for(AssessItem assessItem: assessItemsList){
			if(assessItem.getSupervisor().equals("1")){
				supScore=Float.parseFloat(scoreMap.get(supScoreMap.get(assessItem.getId().toString())));
				numOfRole++;
			}else{
				supScore = 0;
			}
			if(assessItem.getObserver().equals("1")){
				obsScore=Float.parseFloat(scoreMap.get(obsScoreMap.get(assessItem.getId().toString())));
				numOfRole++;
			}else{
				obsScore = 0;
			}
			if(assessItem.getExaminer().equals("1")){
				examScore=Float.parseFloat(scoreMap.get(examScoreMap.get(assessItem.getId().toString())));
				numOfRole++;
			}else{
				examScore = 0;
			}
			averageScore =  (supScore + obsScore + examScore)/numOfRole;
			average = df.format(averageScore);
			averageGradeList = codeScore(assessItem.getId().toString(),average,averageGradeList);
			numOfRole = 0;
		}
		studentGrade.setAverageGrade(averageGradeList);
		studentGrade.setTotalScore(calculateTotalScore(averageGradeList,assessItemsList));
		return studentGrade;
	}
	public String calculateTotalScore(String averageGradeList, List<AssessItem> assessItemsList){
		//算总分公式
		float totalScore=0;
		String itemGrade;
		HashMap<String, String> averageGrade = getScore(averageGradeList);
		
		for(AssessItem assessItem: assessItemsList){
			itemGrade = averageGrade.get(assessItem.getId().toString());
			totalScore = Float.parseFloat(itemGrade)*assessItem.getPercent()/100 + totalScore;
		}
		java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00");
        String total = df.format(totalScore);
		return total;
	/*	HashMap<String, String> scoreMap = getScoreMap();
		HashMap<String, String> supScoreMap = getScore(studentGrade.getSupervisorGrade());
		HashMap<String, String> obsScoreMap = getScore(studentGrade.getObserverGrade());
		HashMap<String, String> examScoreMap = getScore(studentGrade.getExaminerGrade());
		
		float totalScore = 0, supScore=0,obsScore=0,examScore=0;
		int numOfRole = 0;
		for(AssessItem assessItem: assessItemsList){
			if(assessItem.getSupervisor().equals("1")){
				supScore=Float.parseFloat(scoreMap.get(supScoreMap.get(assessItem.getId().toString())));
				numOfRole++;
			}else{
				supScore = 0;
			}
			if(assessItem.getObserver().equals("1")){
				obsScore=Float.parseFloat(scoreMap.get(obsScoreMap.get(assessItem.getId().toString())));
				numOfRole++;
			}else{
				obsScore = 0;
			}
			if(assessItem.getExaminer().equals("1")){
				examScore=Float.parseFloat(scoreMap.get(examScoreMap.get(assessItem.getId().toString())));
				numOfRole++;
			}else{
				examScore = 0;
			}
			totalScore = totalScore + (supScore + obsScore + examScore)/numOfRole* assessItem.getPercent()/100;
			numOfRole = 0;
		}
		java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00");
        String total = df.format(totalScore);
		return total;*/
	}
	
	public HashMap<String,String> getScoreMap(){
		HashMap<String, String> scoreMap = new HashMap<String, String>();
		scoreMap.put("A", "4.00");
		scoreMap.put("A-", "3.67");
		scoreMap.put("B+", "3.33");
		scoreMap.put("B", "3.00");
		scoreMap.put("B-", "2.67");
		scoreMap.put("C+", "2.33");
		scoreMap.put("C", "2.00");
		scoreMap.put("C-", "1.67");
		scoreMap.put("D", "1");
		scoreMap.put("F", "0");
		return scoreMap;
	}
	
	
	public String codeScore(String itemID, String grade, String gradeList) {
		gradeList = gradeList + itemID + "," + grade + ";";
		return gradeList;
	}

}