/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;


import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;


import com.uic.util.BaseUtil;
import com.uic.util.PropertiesHelper;
import com.uic.web.struts.form.PreTimeForm;

/**
 * MyEclipse Struts Creation date: 10-31-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="flag"
 */
public class PreTimeAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward goPreTimeUi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("coordinator")) {
			//prepare data for the jsp page
			PropertiesHelper ph = new PropertiesHelper("/WEB-INF/config/FYP-system.properties");
			String startDateTime = ph.getProperties("PreStartDateTime");
			String endDateTime = ph.getProperties("PreEndDateTime");
			//System.out.println(startDateTime);
			if(startDateTime!=null&&endDateTime!=null){
				
				
				String[] start = startDateTime.split(" ");
				String[] end = endDateTime.split(" ");
				String[] startTime = start[1].split(":");
				String[] endTime = end[1].split(":");
				
				request.setAttribute("startDate", start[0]);
				request.setAttribute("startHH", startTime[0]);
				request.setAttribute("startMM", startTime[1]);
				request.setAttribute("startSS", startTime[2]);
				request.setAttribute("endDate", end[0]);
				request.setAttribute("endHH", endTime[0]);
				request.setAttribute("endMM", endTime[1]);
				request.setAttribute("endSS", endTime[2]);
			}

			return mapping.findForward("goPreTimeUi");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward setPreTime(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("coordinator")) {
			PreTimeForm preTimeForm = (PreTimeForm)form;
			//get date and time from jsp
			String startDate = preTimeForm.getStartDate();
			String startTime = preTimeForm.getStartTime();
			String endDate = preTimeForm.getEndDate();
			String endTime = preTimeForm.getEndTime();
			//format conversion
			String startDateTime = startDate+" "+startTime;
			String endDateTime = endDate+" "+endTime;
			
			//System.out.println(startDateTime);
			//System.out.println(endDateTime);
			
			java.util.Date dStartTime = BaseUtil.StringConvertDate(startDateTime);
			java.util.Date dEndTime = BaseUtil.StringConvertDate(endDateTime);
			
			java.util.Date nowDate = new java.util.Date();
			//System.out.println(nowDate);
			
			if(dStartTime.after(nowDate)&&dEndTime.after(nowDate)&&dStartTime.before(dEndTime)){
				PropertiesHelper ph = new PropertiesHelper("/WEB-INF/config/FYP-system.properties");
				
				try {
					/*//save the message to database
					Message message = new Message();
					message.setReceiver("coordinator");
					message.setContent("Update presentation time from "+startDateTime+" to "+endDateTime);
					message.setType("info");
					message.setDate(new Date());
					MessagesServiceInter messagesServiceInter = new MessagesServiceImp();
					
					if(messagesServiceInter.saveMessage(message)){
						System.out.println("save message OK");
					}else{
						System.out.println("save message error");
					}*/
					
					ph.setProperties("PreStartDateTime", startDateTime);
					ph.setProperties("PreEndDateTime", endDateTime);
					ph.setProperties("PreDateTimeState", "true");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				request.setAttribute("PreTimeOperation", "success");
			}else{
				request.setAttribute("PreTimeOperation", "error");
			}
			
			return new ActionForward("/preTime.do?flag=goPreTimeUi");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
}