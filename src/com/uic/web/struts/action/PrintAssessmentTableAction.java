/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;

import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.uic.domain.AssessItem;
import com.uic.domain.Student;
import com.uic.domain.Teacher;
import com.uic.service.imp.AssessItemServiceImp;
import com.uic.service.imp.TeachersServiceImp;
import com.uic.service.inter.AssessItemServiceInter;
import com.uic.service.inter.TeachersServiceInter;

/**
 * MyEclipse Struts Creation date: 05-19-2015
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="printATable"
 *                        path="/WEB-INF/logined/Teacher/printATable.jsp"
 */
public class PrintAssessmentTableAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("teacher")) {
			Teacher teacher=(Teacher)request.getSession().getAttribute("teacherinfo");
			AssessItemServiceInter assessItemService = new AssessItemServiceImp();
			List<AssessItem> assessItemslist = assessItemService.getAssessItems();
			TeachersServiceInter teacherService = new TeachersServiceImp();
			ArrayList<Student> ss = teacherService.getSuperviseStudentList(teacher.getId().toString());
			ArrayList<Student> os = teacherService.getObservateStudentList(teacher.getId().toString());
			ArrayList<Student> es = teacherService.getExmineStudentList(teacher.getId().toString());
			request.setAttribute("superviseStudentList", ss);
			request.setAttribute("observateStudentList", os);
			request.setAttribute("examineStudentList", es);
			request.setAttribute("assessItemslist", assessItemslist);
			return mapping.findForward("printATable");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
}