/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.uic.domain.ObsTopic;
import com.uic.domain.TeaTopic;
import com.uic.domain.Teacher;
import com.uic.domain.Topic;
import com.uic.service.imp.FYPServiceImp;
import com.uic.service.imp.TeachersServiceImp;

/** 
 * MyEclipse Struts
 * Creation date: 10-26-2014
 * 
 * XDoclet definition:
 * @struts.action parameter="flag" validate="true"
 * @struts.action-forward name="chooseObserver" path="/WEB-INF/logined/Teacher/chooseObserver.jsp"
 * @struts.action-forward name="changePwd" path="/WEB-INF/logined/Teacher/changePwd.jsp"
 * @struts.action-forward name="topicList" path="/WEB-INF/logined/Teacher/topicList.jsp"
 * @struts.action-forward name="mainPage" path="/WEB-INF/logined/Teacher/teacherMain.jsp"
 * @struts.action-forward name="timetable" path="/WEB-INF/logined/Teacher/timetable.jsp"
 * @struts.action-forward name="uploadTopic" path="/WEB-INF/logined/Teacher/uploadTopic.jsp"
 */
public class TeacherPageControlAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward chooseObserver(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("Using TeacherPageControlAction");
		if(request.getSession().getAttribute("role").equals("teacher")){
			//prepare date: teacherList and Teatopic List of the current teacher.
			Teacher curTeacher = (Teacher) request.getSession().getAttribute("teacherinfo");
			TeachersServiceImp teachersServiceImp=new TeachersServiceImp();
			FYPServiceImp fypServiceImp = new FYPServiceImp();
			ArrayList<Teacher> observerList =(ArrayList<Teacher>) teachersServiceImp.getTeachers();
			List<TeaTopic> teaTopicList = fypServiceImp.getTeaTopic(curTeacher.getId().toString());
			ArrayList<ObsTopic> indObsTopics=new ArrayList<ObsTopic>();
			ArrayList<ObsTopic> groObsTopics=new ArrayList<ObsTopic>();
			
			for(int i =0;i<teaTopicList.size();i++){
				if(teaTopicList.get(i).getTopic().getIndividual()){
					List<ObsTopic> obsTopic=fypServiceImp.getObsTopicByTopicId(teaTopicList.get(i).getTopic().getFid().toString());
					indObsTopics.add(obsTopic.get(0));
				}else{
					List<ObsTopic> obsTopic=fypServiceImp.getObsTopicByTopicId(teaTopicList.get(i).getTopic().getFid().toString());
					groObsTopics.add(obsTopic.get(0));
				}
			}
			request.setAttribute("observerList", observerList);
			request.setAttribute("indObsTopics", indObsTopics);
			request.setAttribute("groObsTopics", groObsTopics);
			return mapping.findForward("chooseObserver");
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward changePwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("Using TeacherPageControlAction");
		if(request.getSession().getAttribute("role").equals("teacher")){
			return mapping.findForward("changePwd");
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward topicList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("Using TeacherPageControlAction");
		if(request.getSession().getAttribute("role").equals("teacher")){
			FYPServiceImp fypServiceImp=new FYPServiceImp();
			Teacher teacher=(Teacher)request.getSession().getAttribute("teacherinfo");
			System.out.println("Teacher ID "+ teacher.getId());
			List<TeaTopic> teaTopic= fypServiceImp.getTeaTopic(teacher.getId().toString());
			System.out.println("send List size "+ teaTopic.size());
			request.setAttribute("teaTopicList",teaTopic);
			return mapping.findForward("topicList");
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward mainPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("Using TeacherPageControlAction");
		if(request.getSession().getAttribute("role").equals("teacher")){
			return mapping.findForward("mainPage");
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward timetable(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("Using TeacherPageControlAction");
		if(request.getSession().getAttribute("role").equals("teacher")){
			return mapping.findForward("timetable");
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward uploadTopic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("Using TeacherPageControlAction");
		if(request.getSession().getAttribute("role").equals("teacher")){
			TeachersServiceImp ts = new TeachersServiceImp();
			List<Teacher> teacherList = ts.getTeachers();
			request.setAttribute("teacherList", teacherList);
			return mapping.findForward("uploadTopic");
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward editTopic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("Using TeacherPageControlAction");
		if(request.getSession().getAttribute("role").equals("teacher")){
			FYPServiceImp fs= new FYPServiceImp();
			String teaTopicID=request.getParameter("id");
			List<TeaTopic> teaTopic = fs.getTeaTopicByTopicId(teaTopicID);
			request.setAttribute("teaTopic", teaTopic);
			TeachersServiceImp ts = new TeachersServiceImp();
			List<Teacher> teacherList = ts.getTeachers();
			request.setAttribute("teacherList", teacherList);
			return mapping.findForward("editTopic");
		}else{
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
}