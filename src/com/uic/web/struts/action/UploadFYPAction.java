/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.uic.web.struts.action;

import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.uic.domain.ObsTopic;
import com.uic.domain.Teacher;
import com.uic.domain.Topic;
import com.uic.service.imp.FYPServiceImp;
import com.uic.service.imp.TeachersServiceImp;
import com.uic.util.BaseUtil;
import com.uic.util.PropertiesHelper;
import com.uic.web.struts.form.UploadFYPForm;

/**
 * MyEclipse Struts Creation date: 11-02-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/uploadFYP" name="uploadFYPForm" parameter="flag"
 *                scope="request" validate="true"
 */
public class UploadFYPAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward uploadTopicUi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("teacher")) {
			// check propertises if the today is in upload period
			/*PropertiesHelper ph = new PropertiesHelper(
					"/WEB-INF/config/FYP-system.properties");
			String start = ph.getProperties("UploadTopicsStartDateTime");
			String end = ph.getProperties("UploadTopicsEndDateTime");
			if (start != null && end != null) {
				if (BaseUtil.todayIsInPeriod(start, end)) {
					TeachersServiceImp ts = new TeachersServiceImp();
					List<Teacher> teacherList = ts.getTeachers();
					request.setAttribute("teacherList", teacherList);
					request.setAttribute("uploadPeriod", start+" to "+ end);
					request.setAttribute("uploadTopicStart", "true");
					return mapping.findForward("uploadTopicUi");
				} else {
					if(BaseUtil.todayIsBefore(start)){
						System.out.println("before");
						request.setAttribute("todayIsBeforeUploadTime", "true");
					}else if(BaseUtil.todayIsAfter(end)){
						System.out.println("after");
						request.setAttribute("todayIsAfterUploadTime", "true");
					}
					System.out.println("end ");
					request.setAttribute("uploadPeriod", start+" to "+ end);
					request.setAttribute("uploadTopicStart", "false");
					return mapping.findForward("uploadTopicUi");
				}
			} else {
				request.setAttribute("noUploadTime", "true");
				request.setAttribute("noUploadTimeInfo", "Coordinator does not set the upload topic time.");
				request.setAttribute("uploadTopicStart", "false");
				return mapping.findForward("uploadTopicUi");
			}*/
			PropertiesHelper ph = new PropertiesHelper(
					"/WEB-INF/config/FYP-system.properties");
			String end = ph.getProperties("ChooseTopicEndDateTime");
			if(end!=null){
				if(BaseUtil.todayIsBefore(end)){
					TeachersServiceImp ts = new TeachersServiceImp();
					List<Teacher> teacherList = ts.getTeachers();
					request.setAttribute("teacherList", teacherList);
					request.setAttribute("uploadPeriod", end);
					request.setAttribute("uploadTopicStart", "true");
					return mapping.findForward("uploadTopicUi");
				}else{
					System.out.println("after");
					request.setAttribute("todayIsAfterUploadTime", "true");
					request.setAttribute("uploadPeriod", end);
					request.setAttribute("uploadTopicStart", "false");
					return mapping.findForward("uploadTopicUi");
				}
			}else{
				TeachersServiceImp ts = new TeachersServiceImp();
				List<Teacher> teacherList = ts.getTeachers();
				request.setAttribute("teacherList", teacherList);
				request.setAttribute("uploadPeriod", end);
				request.setAttribute("uploadTopicStart", "true");
				return mapping.findForward("uploadTopicUi");
			}
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}

	public ActionForward uploadFYP(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UploadFYPForm uploadFYPForm = (UploadFYPForm) form;
		if(uploadFYPForm.getTitle().isEmpty()){
			request.setAttribute("noTitle", "true");
			return mapping.findForward("uploaderr");
		}else if(uploadFYPForm.getDescription().isEmpty()){
			request.setAttribute("noDescription", "true");
			return mapping.findForward("uploaderr");
		}
		// set up the data service.
		TeachersServiceImp teachersServiceImp = new TeachersServiceImp();
		FYPServiceImp fypServiceImp = new FYPServiceImp();
		Teacher teacher=(Teacher)request.getSession().getAttribute("teacherinfo");
		System.out.println("cur teacher name "+teacher.getName());
		// declare the class
		String[] supervisor = uploadFYPForm.getSupervisor();
		Topic topic = new Topic();
		ArrayList<Teacher> teacherlist = new ArrayList<Teacher>();
		for (int i = 0; i < supervisor.length; i++) {
			System.out.println("get sup"+supervisor[i]);
			Teacher t = teachersServiceImp
					.getUniqueTeacherByName(supervisor[i]);
			teacherlist.add(t);
		}
		
		//if the supervisor contain current teacher
		boolean f = false;
		for(Teacher t: teacherlist){
			if(t.getId().intValue()==teacher.getId().intValue()){
				f=true;
			}
		}
		if(!f){
			System.out.println("do not contain");
			request.setAttribute("didNotContainSupervisor", "true");
			return mapping.findForward("uploaderr");
		}
		
		
		// fetch the data from the form to the topic object
		topic.setTitle(uploadFYPForm.getTitle());
		topic.setCredit(Integer.parseInt(uploadFYPForm.getCredit()));
		topic.setIsfull(false);
		topic.setDescription(uploadFYPForm.getDescription());
		if ("individual".equals(uploadFYPForm.getIndividual())) {
			topic.setIndividual(true);
			topic.setNumOfStudent(Integer.parseInt("1"));
		} else {
			topic.setIndividual(false);
			topic.setNumOfStudent(Integer.parseInt(uploadFYPForm.getNumOfStu()));
		}
		// save to database
		boolean success = fypServiceImp.uploadTopic(teacherlist, topic);

		if (success) {
			request.setAttribute("ifTopicUploadSuccess", "true");
			request.setAttribute("operationInfo", "Upload topic success.");
		} else {
			request.setAttribute("ifTopicUploadSuccess", "false");
			request.setAttribute("operationInfo", "Upload topic faile.");
		}
		// set a default observer
		ObsTopic obsTopic = new ObsTopic();
		obsTopic.setObserver(teacherlist.get(0));
		obsTopic.setTopic(topic);
		fypServiceImp.saveObject(obsTopic);
		return mapping.findForward("uploadok");
	}
}